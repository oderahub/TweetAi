TweetAI Backend
Overview
This project is a backend service for the AI social media platform TweetAI. It handles the creation and management of Autobots, processes background jobs, and provides a real-time UI update of Autobots count using WebSockets. The backend is built with Express, TypeScript, and integrates with MySQL, Socket.IO, and Bull for task management.

Features
Real-time Autobots Count: Uses Socket.IO to emit the count of Autobots in real-time.
Rate Limiting: Limits the number of API requests to 5 per minute per IP.
Pagination: Limits the number of data results returned per request to 10.
Background Job Processing: Uses Bull to manage background jobs for Autobots creation.
API Documentation: Generated with Swagger.
Prerequisites
Node.js (v16 or later)
MySQL database
Redis server (for Bull)
Yarn (for package management)
Setup
Clone the Repository

bash
Copy code
git clone <repository-url>
cd <repository-directory>
Install Dependencies

bash
Copy code
yarn install
Environment Configuration

Create a .env file in the root directory and add the following environment variables:

env
Copy code
DATABASE_HOST=localhost
DATABASE_PORT=3306
DATABASE_USER=root
DATABASE_PASSWORD=password
DATABASE_NAME=tweetai
REDIS_HOST=localhost
REDIS_PORT=6379
Database Setup

Ensure your MySQL database is up and running. The database schema will be set up automatically when the server starts.

Start the Server

bash
Copy code
yarn start
The server will be available at "loccally".

API Endpoints
GET /api/autobots: Retrieve a paginated list of Autobots. Use query parameters limit (default 10) and offset (default 0).
GET /test-create-autobots: Add a job to the queue to create Autobots. This endpoint is for testing purposes.
WebSocket Integration
The backend uses Socket.IO to provide real-time updates for the Autobots count. The WebSocket server listens on the same port as the HTTP server.

Rate Limiting
Rate limiting is applied to API routes using express-rate-limit. Each IP is limited to 5 requests per minute.

Pagination
The API endpoint /api/autobots supports pagination. Each request can return a maximum of 10 results.

Background Jobs
The application uses Bull to manage background jobs for creating Autobots. A cron job is scheduled to run every minute to add new jobs to the queue.

Swagger Documentation
Swagger API documentation is available at /api-docs after starting the server.

Frontend Integration
For real-time updates on Autobots count, connect to the WebSocket server using the URL http://localhost:3000.

Testing
To run tests, use:

bash 

yarn test

Contributing
Feel free to submit issues or pull requests. For significant changes, please open an issue first to discuss the changes.

